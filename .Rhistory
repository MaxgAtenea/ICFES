3 * df$recaf_punt_c_naturales +
3 * df$recaf_punt_sociales_ciudadanas +
df$recaf_punt_ingles) / 13
)
}
calcular_puntaje_global_sb11 <- function(df) {
round(
5*(3 * df$punt_lectura_critica +
3 * df$punt_matematicas +
3 * df$punt_c_naturales +
3 * df$punt_sociales_ciudadanas +
df$punt_ingles) / 13
)
}
#calcular el puntaje global (recalificado) del saber 11 con los puntajes
#recalificados de cada rubro
#https://www.icfes.gov.co/wp-content/uploads/2024/11/FICHA_METODOLOGICA_OE.pdf
icfes$punt_global_recaf_bdsaber11 <- recalificar_puntaje_global_sb11(icfes)
icfes$punt_global_bdsaber11_validacion <- calcular_puntaje_global_sb11(icfes)
summary(icfes[, c("punt_global_bdsaber11_validacion", "punt_global_bdsaber11")])
# Resumen de ambas variables juntas
summary(icfes[, c("punt_global_recaf_bdsaber11", "punt_global_bdsaber11")])
# Resumen de ambas variables juntas
summary(icfes[, c("punt_global_recaf_bdsaber11", "punt_global_bdsaber11")])
#Asignamos a todas las observaciones el valor
icfes$punt_global_bdsaber11_conciliado <- ifelse(
is.na(icfes$punt_global_bdsaber11),
icfes$punt_global_recaf_bdsaber11,
icfes$punt_global_bdsaber11
)
# Resumen de ambos puntajes globales
summary(icfes[
,
c(
"punt_global_recaf_bdsaber11",
"punt_global_bdsaber11",
"punt_global_bdsaber11_conciliado"
)
]
)
#2.1 CODIGOS CINE
#Leer base con codigos snies y cine de los programas
codigos_cine <- read_delim("data/SNIES_CINE_raw/codigos_snies_cine_2023.csv",
escape_double = FALSE,
trim_ws = TRUE,
delim=";",
locale = locale(encoding = "Latin1"))
#Limpiar el nombre de las columnas de cine_sines
names(codigos_cine) <- names(codigos_cine) %>%
stri_trans_general("Latin-ASCII") %>%       # elimina tildes
tolower() %>%                               # convierte a minúsculas
gsub(" ", "_", .) %>%                       # reemplaza espacios con _
gsub("\\(|\\)", "", .)                      #Elimina parentesis
#Seleccionar las columnas de interes
codigos_cine <- codigos_cine %>%
select(all_of(variables_codigo_cine))
#2.2 NOMBRES CINE
#Leer base con codigos snies y nombre de la clasificacion cine
#Base a nivel nacional
cine_snies <- read_excel("data/SNIES_CINE_raw/programas.xlsx")
#Limpiar el nombre de las columnas de cine_sines
names(cine_snies) <- names(cine_snies) %>%
stri_trans_general("Latin-ASCII") %>%       # elimina tildes
tolower() %>%                               # convierte a minúsculas
gsub(" ", "_", .) %>%                       # reemplaza espacios con _
gsub("\\(|\\)", "", .)                      #Elimina parentesis
#Seleccionar las columnas de interes
cine_snies <- cine_snies %>%
select(all_of(variables_cine_snies))
#left join porque la base cine_snies tiene los nombres cine del programa
#y le damos prioridad al nombre que al codigo
base_cine <- left_join(
cine_snies,
codigos_cine,
by = "codigo_snies_del_programa")
#Limpiar la columna estu_nucleo_pregrado:
#sutilesas en la redaccion generan campos duplicados
base_cine$municipio_oferta_programa  <- base_cine$municipio_oferta_programa  %>%
str_to_lower() %>%                          # Convertir a minúsculas
stri_trans_general("latin-ascii") %>%       # Eliminar tildes
str_squish() %>%                            # Eliminar espacios extra
str_trim() %>%                              # Eliminar espacios al principio y al final
str_replace_all(" ", "_") %>%               # Reemplazar espacios por "_"
str_remove_all("[\\.,]")                    # Eliminar puntos y comas
#estu_nucleo_pregrado representa el NBC
write_csv(base_cine, "data/SNIES_CINE_cleaned/base_cine.csv")
#Filtrar por los programas que:
#1. Esten en Bogota
base_cine_filtrada <- base_cine %>%
filter(
municipio_oferta_programa == "bogota_dc",
(codigo_del_municipio_programa == 11001 | is.na(codigo_del_municipio_programa))
)
#Filtrar por los programas que:
#1. Esten en Bogota
base_cine_filtrada <- base_cine %>%
filter(
municipio_oferta_programa == "bogota_dc",
(codigo_del_municipio_programa == 11001 | is.na(codigo_del_municipio_programa)),
estado_programa == "Activo"
)
#Filtrar por los programas que:
#1. Esten en Bogota
#2. Esten activos
base_cine_filtrada <- base_cine %>%
filter(
municipio_oferta_programa == "bogota_dc",
(codigo_del_municipio_programa == 11001 | is.na(codigo_del_municipio_programa)),
estado_programa == "Activo"
)
#3. Cruzar informacion del icfes con la informacion del CINE
#Hacer left join con la base icfes y base_cine
#recuerde que 31 codigos snies en la bd icfes no encontraron match en la bd del snies
data <- left_join(
icfes,
base_cine,
by = join_by(estu_snies_prgmacademico==codigo_snies_del_programa)
)
write_csv(base_cine, "data/BD/icfes_cine.csv")
#Cargar las librerias
library(readr) #lectura de archivos text
library(readxl) #lectura de archivos excel
library(stringi) #para ajustar nombres de las columnas de los data frames
library(dplyr) #manipulacion de dataframes
library(tidyr)
library(ggplot2) #para graficar
library(nlme) #activamos la librería/paquete que nos permite estimar el modelo multinivel
library(stringi) #facilitar la manipulacion de caracteres
library(stringr)#facilitar la manipulacion de caracteres
library(plotly) #para graficas dinamicas
library(lme4)#para la regresion de mixed models
data <- read_delim("data/BD/icfes_cine.csv", escape_double = FALSE, trim_ws = TRUE)
View(data)
############################################################
#Calculo valor agregado
#Abril 2025
#Autor:TBD
#Fuentes de los datos
#1.bd.csv: Base elaborada manualmente con la informacion de data icfes.
#2. programas_bogota_nbc_cine.xlsx: https://hecaa.mineducacion.gov.co/consultaspublicas/programas
#NOTA: Es un listado con los codigos CINE F2013, NBC, SNIES de cada programa.
### La fuente 2 es el reemplazo de la fuente 3.
#3. codigos_snies_cine_2023.csv: https://snies.mineducacion.gov.co/portal/ESTADISTICAS/Bases-consolidadas/
#Archivo csv: "Estudiantes matriculados 2023.csv"
#NOTA: El archivo viene sin duplicados de los codigos SNIES
############################################################
##################################
#Instalar librerias
#################################
# install.packages(c(
#   "readr",
#   "readxl",
#   "stringi",
#   "dplyr",
#   "tidyr",
#   "ggplot2",
#   "nlme",
#   "stringr",
#   "plotly",
#   "lme4"
# ))
##################################
#Librerias
##################################
#Cargar las librerias
library(readr) #lectura de archivos text
library(readxl) #lectura de archivos excel
library(stringi) #para ajustar nombres de las columnas de los data frames
library(dplyr) #manipulacion de dataframes
library(tidyr)
library(ggplot2) #para graficar
library(nlme) #activamos la librería/paquete que nos permite estimar el modelo multinivel
library(stringi) #facilitar la manipulacion de caracteres
library(stringr)#facilitar la manipulacion de caracteres
library(plotly) #para graficas dinamicas
library(lme4)#para la regresion de mixed models
##############################################
#Correr este bloque antes de cargar library(gt)
#install.packages("gt")
#install.packages("webshot2")  # better than webshot, works well
#webshot::install_phantomjs()
#webshot2::install_phantomjs()  # only needs to be run once
#library(gt) #para guardar tablas
##############################################
##################################
#Constantes
##################################
#Los 55 NBC listados por el SNIES en su pagina web
#Recuperado de: https://snies.mineducacion.gov.co/portal/DOCUMENTOS/Glosario/
listado_nbc_men <- c(
"Administración",
"Agronomía",
"Antropología, Artes Liberales",
"Arquitectura",
"Artes Plásticas, Visuales y Afines Artes",
"Artes Representativas",
"Bacteriología",
"Bibliotecología, Otros de Ciencias Sociales y Humanas",
"Biología, Microbiología y Afines",
"Ciencia Política, Relaciones Internacionales",
"Comunicación Social, Periodismo y Afines",
"Contaduría Pública",
"Deportes, Educación Física y Recreación",
"Derecho y Afines",
"Diseño",
"Economía",
"Educación",
"Enfermería",
"Filosofía, Teología y Afines",
"Formación Relacionada con el Campo Militar o Policial",
"Física Geología y otros",
"Geografía, Historia",
"Ingeniería Administrativa y Afines",
"Ingeniería Agroindustrial, Alimentos y Afines",
"Ingeniería Agronómica, Pecuaria y Afines",
"Ingeniería Agrícola, Forestal y Afines",
"Ingeniería Ambiental, Sanitaria y Afines",
"Ingeniería Biomédica y Afines",
"Ingeniería Civil y Afines",
"Ingeniería Electrónica, Telecomunicaciones y Afines",
"Ingeniería Eléctrica y Afines",
"Ingeniería Industrial y Afines",
"Ingeniería Mecánica y Afines",
"Ingeniería Química y Afines",
"Ingeniería de Minas, Metalurgia y Afines",
"Ingeniería de Sistemas, Telemática y Afines",
"Instrumentación Quirúrgica",
"Lenguas Modernas, Literatura, Lingüística y Afines",
"Matemáticas, Estadística y Afines",
"Medicina",
"Medicina Veterinaria",
"Nutrición y Dietética",
"Odontología",
"Optometría",
"Otras Ingenierías",
"Otros Programas Asociados a Bellas Artes",
"Otros Programas de Ciencias de la Salud",
"Programas de Ciencias Naturales",
"Psicología",
"Publicidad y Afines",
"Química y Afines",
"Salud Pública",
"Sociología, Trabajo Social y Afines",
"Terapias",
"Zootecnia"
)
#Variables del excel del snies que viene con los id de cada cine
variables_codigo_cine <- c(
"codigo_snies_del_programa",
"programa_academico",
"nucleo_basico_del_conocimiento_nbc",
"id_cine_campo_amplio",
"id_cine_campo_especifico",
"id_cine_campo_detallado",
"codigo_del_municipio_programa",
"codigo_de_la_institucion",
"institucion_de_educacion_superior_ies",
"ies_acreditada",
"caracter_ies"
)
#variables del excel de snies que viene sin los codigos cine pero si con los nombres
variables_cine_snies <- c(
"codigo_institucion",
"codigo_institucion_padre",
"nombre_institucion",
"estado_institucion",
"caracter_academico",
"codigo_snies_del_programa",
"nombre_del_programa",
"titulo_otorgado",
"estado_programa",
"cine_f_2013_ac_campo_amplio",
"cine_f_2013_ac_campo_especific",
"cine_f_2013_ac_campo_detallado",
"area_de_conocimiento",
"nucleo_basico_del_conocimiento",
"nivel_academico",
"nivel_de_formacion",
"modalidad",
"numero_creditos",
"numero_periodos_de_duracion",
"periodicidad",
"departamento_oferta_programa",
"municipio_oferta_programa",
"costo_matricula_estud_nuevos"
)
#municipios que conforman bogota region según la camara de comercio
#https://www.ccb.org.co/es/informacion-especializada/observatorio/entorno-para-los-negocios/desarrollo-urbano-y-regional/en-bogota-region-viven-mas-de-10-millones-de-habitantes
bogota_region <- c(
"arbelaez",
"cabrera",
"cajica",
"carmen_de_carupa",
"caqueza",
"chia",
"chipaque",
"choachi",
"choconta",
"cogua",
"cota",
"cucunuba",
"fusagasuga",
"fomeque",
"fosca",
"fuquene",
"gachala",
"gachancipa",
"gacheta",
"gama",
"granada",
"guacheta",
"guatavita",
"guasca",
"gutierrez",
"junin",
"la_calera",
"lenguazaque",
"macheta",
"manta",
"medina",
"nemocon",
"pandi",
"pasca",
"quetame",
"san_bernardo",
"sesquile",
"sibate",
"silvania",
"simijaca",
"soacha",
"sopo",
"suesca",
"susa",
"sutatausa",
"tabio",
"tausa",
"tenjo",
"tibacuy",
"tibirita",
"tocancipa",
"ubala",
"ubate",
"ubaque",
"une",
"venecia",
"villapinzon",
"zipaquira"
)
#CINE campos amplios son 11 los reportados por el DANE
#CINE campos detallados son 121 (82+10 interdisciplinarios + 10 no clasificados en otra parte)
#CINES especificos segun documento DANE
#Son 39 (29 + 10 interdisciplinarios)
#https://www.sen.gov.co/sites/default/files/pagina-migraciones-files/2024-07/documento-de-la-clasificacion-internacional-normalizada-de-la-educacion-campos-de-educacion-y-formacion-adaptada-para-colombia-CINE-F-2013-A.C.pdf
cines_especificos = c(1,2,3,11,18,21,22,23,28,31,32,38,41,42,48,51,
52,53,54,58,61,68,71,72,73,78,81,82,83,84,88,
91,92,98,101,102,103,104,108)
##################################
#Funciones
##################################
# Función para rellenar con NA
rellenar_na <- function(df, max_filas) {
n_faltantes <- max_filas - nrow(df)
if (n_faltantes > 0) {
df <- bind_rows(df, tibble::tibble(!!names(df)[1] := rep(NA_character_, n_faltantes)))
}
return(df)
}
# Funcion para recalificar el puntaje global del saber 11
recalificar_puntaje_global_sb11 <- function(df) {
round(
5*(3 * df$recaf_punt_lectura_critica +
3 * df$recaf_punt_matematicas +
3 * df$recaf_punt_c_naturales +
3 * df$recaf_punt_sociales_ciudadanas +
df$recaf_punt_ingles) / 13
)
}
# icfes$punt_c_naturales
# icfes$punt_ingles
# icfes$punt_lectura_critica
# icfes$punt_matematicas
# icfes$punt_sociales_ciudadanas
calcular_puntaje_global_sb11 <- function(df) {
round(
5*(3 * df$punt_lectura_critica +
3 * df$punt_matematicas +
3 * df$punt_c_naturales +
3 * df$punt_sociales_ciudadanas +
df$punt_ingles) / 13
)
}
##################################
#LECTURA DE DATOS
##################################
#1. ICFES
#Saber pro y saber 11
#Leer la base consolidada del Saber Pro cruzado con Saber 11
#A nivel de Bogota
icfes <- read_delim("data/BD/icfes_bd.csv", escape_double = FALSE, trim_ws = TRUE)
#Limpiar la columna estu_nucleo_pregrado y actualizarla en el dataframe
#toda vez que sutilesas en la redaccion generan campos duplicados
#estu_nucleo_pregrado representa el NBC
icfes$estu_nucleo_pregrado <- icfes$estu_nucleo_pregrado %>%
str_to_lower() %>%                          # Convertir a minúsculas
stri_trans_general("latin-ascii") %>%       # Eliminar tildes
str_squish() %>%                            # Eliminar espacios extra
str_trim() %>%                              # Eliminar espacios al principio y al final
str_to_title()                              # Capitalizar la primera letra de cada palabra
#Nota: El ICFES recalculo los puntajes del saber 11 para las bases 2012-1 a 2014-1 para que fueran
#comparables con las series del 2014-2 en adelante
#calcular el puntaje global (recalificado) para las observaciones con los puntajes recalificados
#Source: https://www.icfes.gov.co/wp-content/uploads/2024/11/FICHA_METODOLOGICA_OE.pdf
icfes$punt_global_recaf_bdsaber11 <- recalificar_puntaje_global_sb11(icfes)
#Asignamos a todas las observaciones el valor
icfes$punt_global_bdsaber11_conciliado <- ifelse(
is.na(icfes$punt_global_bdsaber11),
icfes$punt_global_recaf_bdsaber11,
icfes$punt_global_bdsaber11
)
# Resumen de ambos puntajes globales
summary(icfes[
,
c(
"punt_global_recaf_bdsaber11",
"punt_global_bdsaber11",
"punt_global_bdsaber11_conciliado"
)
]
)
#2. CINE
#2.1 CODIGOS CINE
#Leer base con codigos snies y cine de los programas
codigos_cine <- read_delim("data/SNIES_CINE_raw/codigos_snies_cine_2023.csv",
escape_double = FALSE,
trim_ws = TRUE,
delim=";",
locale = locale(encoding = "Latin1"))
#Limpiar el nombre de las columnas de cine_sines
names(codigos_cine) <- names(codigos_cine) %>%
stri_trans_general("Latin-ASCII") %>%       # elimina tildes
tolower() %>%                               # convierte a minúsculas
gsub(" ", "_", .) %>%                       # reemplaza espacios con _
gsub("\\(|\\)", "", .)                      #Elimina parentesis
#Seleccionar las columnas de interes
codigos_cine <- codigos_cine %>%
select(all_of(variables_codigo_cine))
#2.2 NOMBRES CINE
#Leer base con codigos snies y nombre de la clasificacion cine
#Base a nivel nacional
cine_snies <- read_excel("data/SNIES_CINE_raw/programas.xlsx")
#Limpiar el nombre de las columnas de cine_sines
names(cine_snies) <- names(cine_snies) %>%
stri_trans_general("Latin-ASCII") %>%       # elimina tildes
tolower() %>%                               # convierte a minúsculas
gsub(" ", "_", .) %>%                       # reemplaza espacios con _
gsub("\\(|\\)", "", .)                      #Elimina parentesis
#Seleccionar las columnas de interes
cine_snies <- cine_snies %>%
select(all_of(variables_cine_snies))
#2.3 Unir los dataframes con la informacion del CINE
#left join porque la base cine_snies tiene los nombres cine del programa
#y le damos prioridad al nombre que al codigo
base_cine <- left_join(
cine_snies,
codigos_cine,
by = "codigo_snies_del_programa")
#Limpiar la columna estu_nucleo_pregrado:
#sutilesas en la redaccion generan campos duplicados
base_cine$municipio_oferta_programa  <- base_cine$municipio_oferta_programa  %>%
str_to_lower() %>%                          # Convertir a minúsculas
stri_trans_general("latin-ascii") %>%       # Eliminar tildes
str_squish() %>%                            # Eliminar espacios extra
str_trim() %>%                              # Eliminar espacios al principio y al final
str_replace_all(" ", "_") %>%               # Reemplazar espacios por "_"
str_remove_all("[\\.,]")                    # Eliminar puntos y comas
#estu_nucleo_pregrado representa el NBC
write_csv(base_cine, "data/SNIES_CINE_cleaned/base_cine.csv")
#Filtrar por los programas que:
#1. Esten en Bogota
#2. Esten activos
base_cine_filtrada <- base_cine %>%
filter(
municipio_oferta_programa == "bogota_dc",
(codigo_del_municipio_programa == 11001 | is.na(codigo_del_municipio_programa)),
estado_programa == "Activo"
)
#3. Cruzar informacion del icfes con la informacion del CINE
#Hacer left join con la base icfes y base_cine
#Especificacion del dataframe:
#1.Pruebas saber 11 y pro correspondientes a bogota
#2. Nombres y codigos cine de programas activos en bogota
#Nota: 31 codigos snies en la bd icfes no encontraron match en la bd del snies
data <- left_join(
icfes,
base_cine,
by = join_by(estu_snies_prgmacademico==codigo_snies_del_programa)
)
write_csv(data, "data/BD/icfes_cine.csv")
write_csv(data, "data/BD/icfes_cine.csv")
write_csv(base_cine, "data/SNIES_CINE_cleaned/base_cine.csv")
data
write_csv(data, "data/BD/icfes_cine.csv")
write_csv(base_cine, "data/SNIES_CINE_cleaned/base_cine.csv")
write_csv(base_cine, "data/BD/icfes_cine.csv")
write_csv(data, "data/BD/icfes_cine.csv")
getwd
getwd()
write_csv(data, "data/SNIES_CINE_cleaned/icfes_cine.csv")
write_csv(data, "data/BD/icfes_cine.csv")
data
View(data)
write_csv(data, "data/SNIES_CINE_cleaned/icfes_cine.csv")
